/**
 * build.common.gradle
 *
 * Common build file for FTC Robot Controller projects.
 */

import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
    compileSdk 34

    signingConfigs {
        release {
            def apkStoreFile = System.getenv("APK_SIGNING_STORE_FILE")
            if (apkStoreFile != null) {
                keyAlias System.getenv("APK_SIGNING_KEY_ALIAS")
                keyPassword System.getenv("APK_SIGNING_KEY_PASSWORD")
                storeFile file(System.getenv("APK_SIGNING_STORE_FILE"))
                storePassword System.getenv("APK_SIGNING_STORE_PASSWORD")
            } else {
                keyAlias 'androiddebugkey'
                keyPassword 'android'
                storeFile rootProject.file('libs/ftc.debug.keystore')
                storePassword 'android'
            }
        }

        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile rootProject.file('libs/ftc.debug.keystore')
            storePassword 'android'
        }
    }

    defaultConfig {
        signingConfig signingConfigs.debug
        applicationId 'com.qualcomm.ftcrobotcontroller'
        minSdkVersion 24
        targetSdkVersion 28

        // Sync versionCode and versionName with manifest
        def manifestFile = project(':FtcRobotController').file('src/main/AndroidManifest.xml')
        def manifestText = manifestFile.getText()
        def vCodePattern = Pattern.compile("versionCode=\"(\\d+(\\.\\d+)*)\"")
        def matcher = vCodePattern.matcher(manifestText)
        matcher.find()
        def vCode = Integer.parseInt(matcher.group(1))
        def vNamePattern = Pattern.compile("versionName=\"(.*)\"")
        matcher = vNamePattern.matcher(manifestText)
        matcher.find()
        def vName = matcher.group(1)
        versionCode vCode
        versionName vName
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }
        debug {
            debuggable true
            jniDebuggable true
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst '**/*.so'
    }

    ndkVersion '21.3.6528147'
}

// Repositories
repositories {
    google()
    mavenCentral()
    jcenter() // optional, for older dependencies
    maven { url "https://maven.brott.dev" } // Acme Robotics dashboard
    maven { url "https://mymaven.bylazar.com/releases" } // Bylazar libraries
    flatDir { dirs rootProject.file("libs") } // optional for local jars
}

// Dependencies
dependencies {
    // FTC SDK
    implementation 'org.firstinspires.ftc:Inspection:11.0.0'
    implementation 'org.firstinspires.ftc:Blocks:11.0.0'
    implementation 'org.firstinspires.ftc:RobotCore:11.0.0'
    implementation 'org.firstinspires.ftc:RobotServer:11.0.0'
    implementation 'org.firstinspires.ftc:OnBotJava:11.0.0'
    implementation 'org.firstinspires.ftc:Hardware:11.0.0'
    implementation 'org.firstinspires.ftc:FtcCommon:11.0.0'
    implementation 'org.firstinspires.ftc:Vision:11.0.0'

    // Android support
    implementation 'androidx.appcompat:appcompat:1.2.0'

    // Acme Robotics Dashboard
    implementation 'com.acmerobotics.dashboard:dashboard:0.5.0'

    // Pedro Pathing
    implementation 'com.pedropathing:ftc:2.0.2'
    implementation 'com.pedropathing:telemetry:1.0.0'

    // Bylazar panels
    implementation 'com.bylazar:fullpanels:1.0.6'
}
